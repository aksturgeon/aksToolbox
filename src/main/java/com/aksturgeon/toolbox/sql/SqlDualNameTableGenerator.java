package com.aksturgeon.toolbox.sql;

import java.awt.List;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.StringReader;
import java.util.Properties;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import com.aksturgeon.toolbox.Dashboard;

/**
 * Parses xml mapping files that were generated by the OrmAssembler and
 * generates DDL scripts for db2 and sql server based on the map configurations.
 * 
 * @author Ken Sturgeon
 */
public class SqlDualNameTableGenerator {
  private String ddl = "";
  private String table = "";
  private String shortTable = "";
  private String longTable = "";
  private String constraints = "";
  private String udx = "";
  private String column = "";
  private String shortColumn = "";
  private String longColumn = "";
//  private String longColumnType = "";
  private String sqlType = "";
  private String keys = "";
  private String javaType = "";
  private List descKeys = new List();

  /**
   * Entry point
   * 
   * @param props
   * @param subSystem
   * @param dbPlatform
   */
  public void generateSql(Properties props, int subSystem, String dbPlatform) {
    switch (subSystem) {
      case Dashboard.CLC_SUBSYSTEM:
        System.out.println("Generating script for clc subsystem...");
        createScriptFile(Dashboard.CLC_SUBSYSTEM, dbPlatform, props);
        System.out.println("Script for clc subsystem complete.");
        break;
      case Dashboard.GLC_SUBSYSTEM:
        System.out.println("Generating script for glc subsystem...");
        createScriptFile(Dashboard.GLC_SUBSYSTEM, dbPlatform, props);
        System.out.println("Script for glc subsystem complete.");
        break;
      case Dashboard.ILC_SUBSYSTEM:
        System.out.println("Generating script for ilc subsystem...");
        createScriptFile(Dashboard.ILC_SUBSYSTEM, dbPlatform, props);
        System.out.println("Script for ilc subsystem complete.");
        break;
    }
  }

  private void createScriptFile(int subSystem, String dbPlatform, Properties props) {
    String outputFolder = props.getProperty("dashboard.root.output.folder");
    String outputFileName = outputFolder;

    switch (subSystem) {
      case Dashboard.CLC_SUBSYSTEM:
        outputFileName += "/clc-" + dbPlatform + "-ddl.sql";
        generateSubSystemDDL(outputFolder + "/clc", dbPlatform);
        break;
      case Dashboard.GLC_SUBSYSTEM:
        outputFileName += "/glc-" + dbPlatform + "-ddl.sql";
        generateSubSystemDDL(outputFolder + "/glc", dbPlatform);
        break;
      case Dashboard.ILC_SUBSYSTEM:
        outputFileName += "/ilc-" + dbPlatform + "-ddl.sql";
        generateSubSystemDDL(outputFolder + "/ilc", dbPlatform);
        break;
    }
    createFile(outputFileName, ddl);
  }

  private void createFile(String sqlOutputFileName, String inputDDL) {
    try {
      System.out.println("Writing " + sqlOutputFileName);
      File sqlFile = new File(sqlOutputFileName);
      if (sqlFile.exists()) {
        sqlFile.delete();
      }
      if (!sqlFile.exists()) {
        sqlFile.createNewFile();
      }
      StringReader stringReader = new StringReader(inputDDL);
      BufferedReader bufferedReader = new BufferedReader(stringReader);
      FileWriter fileWriter = new FileWriter(sqlFile.getCanonicalFile());
      BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);
      for (String line = bufferedReader.readLine(); line != null; line = bufferedReader.readLine()) {
        bufferedWriter.write(line);
        bufferedWriter.newLine();
      }
      bufferedReader.close();
      bufferedWriter.close();
      System.out.println(sqlOutputFileName + " complete.");
    } catch (IOException e) {
      e.printStackTrace();
    }
  }

  private void generateSubSystemDDL(String outputFolder, String dbPlatform) {
    File directory = new File(outputFolder + "/" + dbPlatform);
    File[] fList = directory.listFiles();
    populateDescKeys();
    for (File xmlFile : fList) {
      createSqlUsingOrm(xmlFile, dbPlatform);
    }
  }

  private void createSqlUsingOrm(File xmlFile, String dbPlatform) {
    NodeList sqlClassNodeList = null;
    Node sqlClassNode = null;
    Element sqlClassElement = null;
    constraints = keys = "";

    DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();

    // For db2i we need to open the sqlserver xml file to get the long column
    // names
    File sqlServerXmlFile = null;
    Document docSqlMap = null;
    if (dbPlatform.equals("db2i")) {
      sqlServerXmlFile = new File(xmlFile.getPath().toString().replace("db2i", "sqlserver"));
    }

    try {
      DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
      Document doc = docBuilder.parse(xmlFile);
      doc.getDocumentElement().normalize();
      if (dbPlatform.equals("db2i")) {
        docSqlMap = docBuilder.parse(sqlServerXmlFile);
        docSqlMap.getDocumentElement().normalize();
      }

      // Get the table name
      NodeList classNodeList = doc.getElementsByTagName("class");
      Node classNode = classNodeList.item(0);
      Element classElement = (Element) classNode;
      if (dbPlatform.equals("db2i")) {
        sqlClassNodeList = docSqlMap.getElementsByTagName("class");
        sqlClassNode = sqlClassNodeList.item(0);
        sqlClassElement = (Element) sqlClassNode;
      }

      beginCreateTableStatement(dbPlatform, classElement, sqlClassElement);
      setUniqueKeys(doc, docSqlMap);
      generateConstraints(dbPlatform);
      if (dbPlatform.equals("db2i")) {
        generateUniqueIndex();
      }

      // Get columns
      NodeList propertyNodeList = doc.getElementsByTagName("property");
      for (int i = 0; i < propertyNodeList.getLength(); i++) {
        Node propertyNode = propertyNodeList.item(i);
        if (propertyNode.getNodeType() == Node.ELEMENT_NODE) {
          Element propertyElement = (Element) propertyNode;
          longColumn = propertyElement.getAttribute("name").toUpperCase();
          //longColumnType = propertyElement.getAttribute("type");
          if (propertyNode.hasChildNodes()) {
            NodeList columnNodeList = propertyNode.getChildNodes();
            for (int x = 0; x < columnNodeList.getLength(); x++) {
              Node columnNode = columnNodeList.item(x);
              if (columnNode.getNodeType() == Node.ELEMENT_NODE) {
                Element columnElement = (Element) columnNode;
                column = columnElement.getAttribute("name");
                shortColumn = columnElement.getAttribute("name").toUpperCase();
                if (dbPlatform.equals("db2i")
                    && propertyElement.getAttribute("type").toString().equals("compositeDate")) {
                  longColumn = getLongCompositeDateName(propertyElement.getAttribute("name"), docSqlMap, x);
                }
                sqlType = columnElement.getAttribute("sql-type").toUpperCase();
                if (sqlType.equals("INTEGER")) {
                  sqlType = "INT";
                }
                if (sqlType.length() == 0) {
                  javaType = propertyElement.getAttribute("type");
                  if (javaType.equals("integer")) {
                    sqlType = "INT";
                  }
                  if (javaType.equals("long")) {
                    sqlType = "BIGINT";
                  }
                  if (javaType.equals("fixedDate")) {
                    sqlType = "NUMERIC(8)";
                  }
                  if (javaType.equals("date") || javaType.equals("calendar")) {
                    if (dbPlatform.equals("sqlserver")) {
                      sqlType = "DATETIME";
                    }
                    if (dbPlatform.equals("db2i")) {
                      sqlType = "TIMESTAMP";
                    }
                  }
                }
                if (dbPlatform.equals("db2i")) {
                  if (keys.contains(longColumn.toUpperCase())) {
                    sqlType += " NOT NULL";
                  }
                } else {
                  if (keys.contains(column)) {
                    sqlType += " NOT NULL";
                  }
                }
                if (dbPlatform.equals("db2i")) {
                  if (longColumn.toUpperCase().equals(shortColumn.toUpperCase())) {
                    ddl += "  " + longColumn.toUpperCase() + " " + sqlType + ",\r\n";
                  } else {
                  ddl += "  " + longColumn.toUpperCase() + " FOR COLUMN " + shortColumn + " " + sqlType + ",\r\n";
                  // ddl += " " + longColumn + " FOR COLUMN " + shortColumn + "
                  // " + sqlType + ",\r\n";
                  }
                } else {
                  ddl += "  " + column + " " + sqlType + ",\r\n";
                }
              }
            }
          }
        }
      }
      ddl += constraints;
      if (dbPlatform.equals("db2i")) {
        // ddl += "RENAME TABLE " + longTable + " TO SYSTEM NAME " + shortTable
        // + ";\r\nCOMMIT;\r\n";
        if (udx.length() > 0) {
          ddl += udx;
        }
      }
      ddl += "\r\n";
      if (dbPlatform.equals("db2i")) {
        if(longTable.length() > 10) {
          System.out.println(longTable + " FOR SYSTEM NAME " + shortTable + " script generated.");
        } else {
          System.out.println(longTable + " script generated.");
        }
      } else {
        System.out.println(table + " script generated.");
      }
      table = "";
      shortTable = "";
      longTable = "";
      constraints = "";
      udx = "";
      column = "";
      shortColumn = "";
      longColumn = "";
//      longColumnType = "";
      sqlType = "";
      keys = "";
      javaType = "";
    } catch (ParserConfigurationException e) {
      e.printStackTrace();
      System.out.println("Unable to create DocumentBuilder.");
    } catch (SAXException e) {
      e.printStackTrace();
      System.out.println("XML parsing error.");
    } catch (IOException e) {
      e.printStackTrace();
      System.out.println("Error accessing file.");
    }
  }
  
  public static String rightPad(String str, int num) {
    return String.format("%1$-" + num + "s", str).replace(' ', '#');
  }

  private String getLongCompositeDateName(String compositeDateName, Document docSqlMap, int childNodeNumber) {
    String returnColumnName = "";
    NodeList propertyNodeList = docSqlMap.getElementsByTagName("property");
    for (int i = 0; i < propertyNodeList.getLength(); i++) {
      Node propertyNode = propertyNodeList.item(i);
      if (propertyNode.getNodeType() == Node.ELEMENT_NODE) {
        Element propertyElement = (Element) propertyNode;
        if (propertyElement.getAttribute("name").equals(compositeDateName)) {
          NodeList columnNodeList = propertyNode.getChildNodes();
          Node columnNode = columnNodeList.item(childNodeNumber);
          Element columnElement = (Element) columnNode;
          returnColumnName = columnElement.getAttribute("name");
          break;
        }
      }
    }
    return returnColumnName;
  }

  private void beginCreateTableStatement(String dbPlatform, Element classElement, Element sqlClassElement) {
    if (dbPlatform.equals("sqlserver")) {
      table = classElement.getAttribute("table"); // .substring(0,
                                                  // classElement.getAttribute("name").length()
                                                  // - 4);
      ddl += "CREATE TABLE " + table + " (\r\n" + "  RECID BIGINT NOT NULL IDENTITY,\r\n"
          + "  VERSIONID BIGINT NOT NULL,\r\n";
    }
    if (dbPlatform.equals("db2i")) {
      table = sqlClassElement.getAttribute("table");
      shortTable = classElement.getAttribute("table");
      //longTable = rightPad(table.toUpperCase(), 11);
      longTable = table.toUpperCase();
      if (longTable.length() > 10) {
        ddl += "CREATE TABLE " + longTable + " FOR SYSTEM NAME " + shortTable + " (\r\n";
      } else {
        ddl += "CREATE TABLE " + longTable + " (\r\n";
      }
      ddl += "  RECID BIGINT GENERATED ALWAYS AS IDENTITY,\r\n" + "  VERSIONID BIGINT NOT NULL,\r\n";
    }
  }

  private void generateConstraints(String dbPlatform) {
    if (dbPlatform.equals("sqlserver")) {
      constraints = "  CONSTRAINT PK_" + table + " PRIMARY KEY(RECID)";
      if (keys.length() > 0) {
        keys = keys.substring(0, keys.length() - 2);
        constraints += ",\r\n  CONSTRAINT UQ_" + table + " UNIQUE(" + keys + ")";
      }
      constraints += "\r\n);\r\nGO\r\n";
    }
    if (dbPlatform.equals("db2i")) {
      constraints = "  CONSTRAINT PK_" + longTable + " PRIMARY KEY(RECID)";
      constraints += "\r\n);\r\n";
    }
  }

//  private void generateUniqueIndex() {
//    String indexName = longTable;
//    if (keys.length() > 0) {
//      keys = keys.substring(0, keys.length() - 2);
//      if (shortTable.startsWith("PF")) {
//        //indexName = shortTable.substring(2);
//        shortTable = shortTable.substring(2);
//      } else {
//        //indexName = shortTable + "1";
//        shortTable = shortTable + "1";
//      }
//      //udx = "COMMIT;\r\nCREATE UNIQUE INDEX " + indexName + " ON " + longTable + "(" + keys + ");\r\n";
//       udx = "CREATE UNIQUE INDEX UDX_" + indexName + " FOR SYSTEM NAME " + shortTable + " ON " + longTable + "(" + keys + ");\r\n";
//    }
//  }
  
  private void generateUniqueIndex() {
    String logicalFile = "";
    if (keys.length() > 0) {
      keys = getSortedKeys();
      //keys = keys.substring(0, keys.length() - 2);
      if (shortTable.startsWith("PF")) {
        logicalFile = shortTable.substring(2);
      } else {
        logicalFile = shortTable;
      }
      if (logicalFile.length() == 10) {
        logicalFile = logicalFile.substring(0,9) + "1";
      } else {
        logicalFile = logicalFile + "1";
      }
      if (longTable.length() > 10) {
        udx = "CREATE UNIQUE INDEX UDX_" + longTable + " FOR SYSTEM NAME " + logicalFile + " ON " + longTable + "(" + keys + ");\r\n";
      } else {
        udx = "CREATE UNIQUE INDEX UDX_" + longTable + " ON " + longTable + "(" + keys + ");\r\n";
      }
    }
  }
  
  private String getSortedKeys() {
    String unsortedKey = "";
    String sortedKeys = "";
    boolean matchFound = false;
    keys.substring(0, keys.length() - 2);
    
    String[] keyList = keys.split(", ");
    for (String key : keyList) {
      for (int i = 0; i < descKeys.getItemCount(); i++) {
        matchFound = false;
        if (descKeys.getItem(i).equals(longTable + "." + key)) {
          matchFound = true;
          break;
        }
      }
      if (sortedKeys.length() == 0) {
        sortedKeys = key;
      } else {
        sortedKeys += ", " + key;
      }
      if (matchFound) {
        sortedKeys += " DESC";
      }
    }
    return sortedKeys.substring(0, keys.length() - 2);
  }

  private void setUniqueKeys(Document doc, Document docSqlMap) {
    NodeList keyNodeList = null;
    if (docSqlMap != null) {
      keyNodeList = docSqlMap.getElementsByTagName("natural-id");
    } else {
      keyNodeList = doc.getElementsByTagName("natural-id");
    }
    // NodeList keyNodeList = doc.getElementsByTagName("natural-id");
    if (keyNodeList != null && keyNodeList.getLength() > 0) {
      for (int i = 0; i < keyNodeList.getLength(); i++) {
        Node propertyKeyNode = keyNodeList.item(i);
        if (propertyKeyNode.getNodeType() == Node.ELEMENT_NODE) {
          if (propertyKeyNode.hasChildNodes()) {
            NodeList propertyChildNodeList = propertyKeyNode.getChildNodes();
            for (int x = 0; x < propertyChildNodeList.getLength(); x++) {
              Node propertyChildNode = propertyChildNodeList.item(x);
              if (propertyChildNode.getNodeType() == Node.ELEMENT_NODE) {
                Element propertyElement = (Element) propertyChildNode;
                NodeList columnNodeList = propertyElement.getChildNodes();
                for (int y = 0; y < columnNodeList.getLength(); y++) {
                  Node columnNode = columnNodeList.item(y);
                  if (columnNode.getNodeType() == Node.ELEMENT_NODE) {
                    Element columnElement = (Element) columnNode;
                    keys += columnElement.getAttribute("name") + ", ";
                    if (docSqlMap != null) {
                      keys = keys.toUpperCase();
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  /**
   * USE THE FOLLOWING SQL STATEMENT TO GENERATE LOCIC FOR populateDescKeys
   * SELECT  'descKeys.add("' + LEFT(UPPER(tbl.name)
   *         + '###########',11) + '.' + UPPER(col.name)
   *         + '");'
   * FROM  sys.tables tbl
   * JOIN  sys.columns col
   *   ON  col.object_id = tbl.object_id
   * JOIN  sys.index_columns ic
   *   ON  ic.object_id = tbl.object_id
   *   AND ic.column_id = col.column_id
   * WHERE tbl.type = 'U'
   *   AND tbl.name NOT LIKE 'QRTZ_%'
   *   AND ic.is_descending_key = 1
   * ORDER BY tbl.name, col.column_id
   */
  private void populateDescKeys () {
    descKeys.add("AGENTDRAWRE.TRANSACTIONHISTORYDATEYEAR");
    descKeys.add("AGENTDRAWRE.TRANSACTIONHISTORYDATEMONTH");
    descKeys.add("AGENTDRAWRE.TRANSACTIONHISTORYDATEDAY");
    descKeys.add("AGENTDRAWRE.TRANSACTIONHISTORYTIME");
    descKeys.add("AGENTDRAWRE.TRANSACTIONHISTORYSEQUNUMB");
    descKeys.add("AGENTDRAWRE.TRANSACTIONHISTORYSUBSEQUNO");
    descKeys.add("ROLEHISTORY.TRANSACTIONHISTORYDATEYEAR");
    descKeys.add("ROLEHISTORY.TRANSACTIONHISTORYDATEMONTH");
    descKeys.add("ROLEHISTORY.TRANSACTIONHISTORYDATEDAY");
    descKeys.add("ROLEHISTORY.TRANSACTIONHISTORYTIME");
    descKeys.add("ROLEHISTORY.TRANSACTIONHISTORYSEQUNUMB");
    descKeys.add("ROLEHISTORY.TRANSACTIONHISTORYSUBSEQUNO");
    descKeys.add("SECURITYUSE.TRANSACTIONHISTORYDATEYEAR");
    descKeys.add("SECURITYUSE.TRANSACTIONHISTORYDATEMONTH");
    descKeys.add("SECURITYUSE.TRANSACTIONHISTORYDATEDAY");
    descKeys.add("SECURITYUSE.TRANSACTIONHISTORYTIME");
    descKeys.add("SECURITYUSE.TRANSACTIONHISTORYSEQUNUMB");
    descKeys.add("SECURITYUSE.TRANSACTIONHISTORYSUBSEQUNO");
    descKeys.add("USERAUTHORI.TRANSACTIONHISTORYDATEYEAR");
    descKeys.add("USERAUTHORI.TRANSACTIONHISTORYDATEMONTH");
    descKeys.add("USERAUTHORI.TRANSACTIONHISTORYDATEDAY");
    descKeys.add("USERAUTHORI.TRANSACTIONHISTORYTIME");
    descKeys.add("USERAUTHORI.TRANSACTIONHISTORYSEQUNUMB");
    descKeys.add("USERAUTHORI.TRANSACTIONHISTORYSUBSEQUNO");
    descKeys.add("USERROLEHIS.TRANSACTIONHISTORYDATEYEAR");
    descKeys.add("USERROLEHIS.TRANSACTIONHISTORYDATEMONTH");
    descKeys.add("USERROLEHIS.TRANSACTIONHISTORYDATEDAY");
    descKeys.add("USERROLEHIS.TRANSACTIONHISTORYTIME");
    descKeys.add("USERROLEHIS.TRANSACTIONHISTORYSEQUNUMB");
    descKeys.add("USERROLEHIS.TRANSACTIONHISTORYSUBSEQUNO");
  }
  
}
